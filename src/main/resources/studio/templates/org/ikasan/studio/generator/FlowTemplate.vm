/**
* Encapsulate the create of a flow
* This file is auto-generated by Ikasan Studio, do no edit.
*/
@org.springframework.stereotype.Component
public class $flow.JavaClassName {
@org.springframework.beans.factory.annotation.Value(#[["${module.name}"]]#)
## peroperties for all components
#foreach( $ikasanComponent in $flow.flowComponentList )
#if ( ! $ikasanComponent.type.bespokeClass )
#foreach( $propertyMapEntry in $ikasanComponent.StandardProperties.entrySet() )
#if( $!{propertyMapEntry.value.value} )
@org.springframework.beans.factory.annotation.Value("${${propertyMapEntry.value.meta.propertyConfigFileLabel}}")
${propertyMapEntry.value.meta.dataType.CanonicalName}  ${propertyMapEntry.value.meta.PropertyConfigFileLabelAsVariable}
#end
#end
#end
#end
private String moduleName;

@javax.annotation.Resource
org.ikasan.builder.BuilderFactory builderFactory;

@org.springframework.context.annotation.Bean
public org.ikasan.spec.flow.Flow get${flow.JavaClassName}()
{
org.ikasan.builder.ModuleBuilder moduleBuilder = builderFactory.getModuleBuilder(moduleName);
org.ikasan.builder.FlowBuilder flowBuilder = moduleBuilder.getFlowBuilder("${flow.name}");
org.ikasan.builder.component.ComponentBuilder componentBuilder = builderFactory.getComponentBuilder();

org.ikasan.spec.flow.Flow ${flow.JavaVariableName} = flowBuilder
#if ( $flow.Description && $flow.getDescription.length > 0 )
.withDescription("$flow.Description")
#end
##
#foreach( $ikasanComponent in $flow.flowComponentList )
.${ikasanComponent.type.elementCategory.associatedMethodName}("${ikasanComponent.name}",
#if ( $ikasanComponent.type.bespokeClass )
new ${ikasanComponent.properties.bespokeClassName.value}())
#else
componentBuilder.${ikasanComponent.type.associatedMethodName}()
#foreach( $propertyMapEntry in $ikasanComponent.StandardProperties.entrySet() )
#if( $!{propertyMapEntry.value.value} )
#*    *#.set${propertyMapEntry.key}(${propertyMapEntry.value.meta.PropertyConfigFileLabelAsVariable})
#end
#end
#end
.build())
#end
.build();
return ${flow.JavaVariableName};
}
}