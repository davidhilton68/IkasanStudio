/**
* This is the Spring book start class.
* This file is auto-generated by Ikasan Studio, do no edit..
*/
@org.springframework.context.annotation.Configuration("ModuleFactory")
@org.springframework.context.annotation.ImportResource({
"classpath:h2-datasource-conf.xml",
"classpath:ikasan-transaction-pointcut-ikasanMessageListener.xml"
})
public class $className {
@javax.annotation.Resource
org.ikasan.builder.BuilderFactory builderFactory;

@org.springframework.context.annotation.Bean
public org.ikasan.spec.module.Module myModule()
{
// Create a module builder from the builder factory
org.ikasan.builder.ModuleBuilder moduleBuilder = builderFactory.getModuleBuilder("${module.name}")
#if ($module.Description)
.withDescription("${module.Description}")
#end
;

// Create a component builder from the builder factory
org.ikasan.builder.component.ComponentBuilder componentBuilder = builderFactory.getComponentBuilder();

// Add the created flow to the module builder and create the module
org.ikasan.spec.module.Module module = moduleBuilder
#foreach($flow in $module.flows)
.addFlow(get_${flow.JavaVariableName}(moduleBuilder, componentBuilder))
#end
.build();
return module;
}

#foreach($flow in $flows)
private org.ikasan.spec.flow.Flow get_${flow.JavaVariableName}(org.ikasan.builder.ModuleBuilder moduleBuilder, ComponentBuilder componentBuilder) {
org.ikasan.builder.FlowBuilder ${flow.JavaVariableName}FlowBuilder = moduleBuilder.getFlowBuilder("${flow.name}");
org.ikasan.spec.flow.Flow ${flow.JavaVariableName} = ${flow.JavaVariableName}FlowBuilder
#if ($flow.Description)
.withDescription("$flow.Description")
#end
#foreach($ikasanComponent in $flow.flowComponentList)
    .${ikasanComponent.type.elementCategory.associatedMethodName}("${ikasanComponent.name}",
#if ($ikasanComponent.type.custom)
new .${ikasanComponent.type.bespokeClassName}())
#else
componentBuilder.${ikasanComponent.type.associatedMethodName}())
#end



#end
.build();
return ${flow.JavaVariableName};
}
#end
}