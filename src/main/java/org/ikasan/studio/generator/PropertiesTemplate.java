package org.ikasan.studio.generator;

import com.intellij.openapi.project.Project;
import com.intellij.psi.PsiFile;

import java.util.HashMap;
import java.util.Map;

/**
 * Currently both velocity and embedded strategy are being evaluated
 */
public class PropertiesTemplate extends Generator {
    public static String MODULE_PROPERTIES_FILENAME = "application";
    private static String MODULE_PROPERTIES_VM = "PropertiesTemplate.vm";

    //@todo auto-generate a user defined propeties extension ?
    private static String MODULE_PROPERTIES_IMPL =
        "# This file is auto-generated by Ikasan Studio, do no edit." +
            "# Logging levels across packages (optional)\n" +
            "logging.level.com.arjuna=INFO\n" +
            "logging.level.org.springframework=INFO\n" +
            "\n" +
            "# Blue console servlet settings (optional)\n" +
            "server.error.whitelabel.enabled=false\n" +
            "\n" +
            "# Web Bindings\n" +
            "server.port=8090\n" +
            "server.address=localhost\n" +
            "server.servlet.context-path=/example-im\n" +
            "server.tomcat.additional-tld-skip-patterns=xercesImpl.jar,xml-apis.jar,serializer.jar\n" +
            "\n" +
            "# Spring config\n" +
            "spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration\n" +
            "spring.liquibase.change-log=classpath:db-changelog.xml\n" +
            "spring.liquibase.enabled=true\n" +
            "\n" +
            "# health probs and remote management (optional)\n" +
            "management.endpoints.web.expose=*\n" +
            "management.server.servlet.context-path=/manage\n" +
            "management.endpoint.shutdown.enabled=true\n" +
            "\n" +
            "# Ikasan persistence store\n" +
            "datasource.username=sa\n" +
            "datasource.password=sa\n" +
            "datasource.driver-class-name=org.h2.Driver\n" +
            "datasource.xadriver-class-name=org.h2.jdbcx.JdbcDataSource\n" +
            "datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1\n" +
            "datasource.dialect=org.hibernate.dialect.H2Dialect\n" +
            "datasource.show-sql=false\n" +
            "datasource.hbm2ddl.auto=none\n" +
            "datasource.validationQuery=select 1";

    public static PsiFile createProperties(final Project project) {
        String templateString = "";
        if (GENERATOR_STRATEGY == GeneratorStrategy.VELOCITY) {
            templateString = createPropertiesVelocity();
        } else {
            templateString = MODULE_PROPERTIES_IMPL;
        }
        return createResourceFile(project, null, MODULE_PROPERTIES_FILENAME, templateString, false);
    }

    public static String createPropertiesVelocity() {
        Map<String, Object> configs = new HashMap<>();
        String templateString = VelocityUtils.generateFromTemplate(MODULE_PROPERTIES_VM, configs);
        return templateString;
    }
}
